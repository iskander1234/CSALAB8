
NewProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800200  0000018e  00000202  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cba  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b14  00000000  00000000  00000f76  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ac  00000000  00000000  00001a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001e38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000053d  00000000  00000000  00001ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001c5  00000000  00000000  000023dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000025a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	65 c0       	rjmp	.+202    	; 0xcc <__ctors_end>
   2:	00 00       	nop
   4:	7a c0       	rjmp	.+244    	; 0xfa <__bad_interrupt>
   6:	00 00       	nop
   8:	78 c0       	rjmp	.+240    	; 0xfa <__bad_interrupt>
   a:	00 00       	nop
   c:	76 c0       	rjmp	.+236    	; 0xfa <__bad_interrupt>
   e:	00 00       	nop
  10:	74 c0       	rjmp	.+232    	; 0xfa <__bad_interrupt>
  12:	00 00       	nop
  14:	72 c0       	rjmp	.+228    	; 0xfa <__bad_interrupt>
  16:	00 00       	nop
  18:	70 c0       	rjmp	.+224    	; 0xfa <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6e c0       	rjmp	.+220    	; 0xfa <__bad_interrupt>
  1e:	00 00       	nop
  20:	6c c0       	rjmp	.+216    	; 0xfa <__bad_interrupt>
  22:	00 00       	nop
  24:	6a c0       	rjmp	.+212    	; 0xfa <__bad_interrupt>
  26:	00 00       	nop
  28:	68 c0       	rjmp	.+208    	; 0xfa <__bad_interrupt>
  2a:	00 00       	nop
  2c:	66 c0       	rjmp	.+204    	; 0xfa <__bad_interrupt>
  2e:	00 00       	nop
  30:	64 c0       	rjmp	.+200    	; 0xfa <__bad_interrupt>
  32:	00 00       	nop
  34:	62 c0       	rjmp	.+196    	; 0xfa <__bad_interrupt>
  36:	00 00       	nop
  38:	60 c0       	rjmp	.+192    	; 0xfa <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5e c0       	rjmp	.+188    	; 0xfa <__bad_interrupt>
  3e:	00 00       	nop
  40:	5c c0       	rjmp	.+184    	; 0xfa <__bad_interrupt>
  42:	00 00       	nop
  44:	5a c0       	rjmp	.+180    	; 0xfa <__bad_interrupt>
  46:	00 00       	nop
  48:	58 c0       	rjmp	.+176    	; 0xfa <__bad_interrupt>
  4a:	00 00       	nop
  4c:	56 c0       	rjmp	.+172    	; 0xfa <__bad_interrupt>
  4e:	00 00       	nop
  50:	54 c0       	rjmp	.+168    	; 0xfa <__bad_interrupt>
  52:	00 00       	nop
  54:	52 c0       	rjmp	.+164    	; 0xfa <__bad_interrupt>
  56:	00 00       	nop
  58:	50 c0       	rjmp	.+160    	; 0xfa <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4e c0       	rjmp	.+156    	; 0xfa <__bad_interrupt>
  5e:	00 00       	nop
  60:	4c c0       	rjmp	.+152    	; 0xfa <__bad_interrupt>
  62:	00 00       	nop
  64:	4a c0       	rjmp	.+148    	; 0xfa <__bad_interrupt>
  66:	00 00       	nop
  68:	48 c0       	rjmp	.+144    	; 0xfa <__bad_interrupt>
  6a:	00 00       	nop
  6c:	46 c0       	rjmp	.+140    	; 0xfa <__bad_interrupt>
  6e:	00 00       	nop
  70:	44 c0       	rjmp	.+136    	; 0xfa <__bad_interrupt>
  72:	00 00       	nop
  74:	42 c0       	rjmp	.+132    	; 0xfa <__bad_interrupt>
  76:	00 00       	nop
  78:	40 c0       	rjmp	.+128    	; 0xfa <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3e c0       	rjmp	.+124    	; 0xfa <__bad_interrupt>
  7e:	00 00       	nop
  80:	3c c0       	rjmp	.+120    	; 0xfa <__bad_interrupt>
  82:	00 00       	nop
  84:	3a c0       	rjmp	.+116    	; 0xfa <__bad_interrupt>
  86:	00 00       	nop
  88:	38 c0       	rjmp	.+112    	; 0xfa <__bad_interrupt>
  8a:	00 00       	nop
  8c:	36 c0       	rjmp	.+108    	; 0xfa <__bad_interrupt>
  8e:	00 00       	nop
  90:	34 c0       	rjmp	.+104    	; 0xfa <__bad_interrupt>
  92:	00 00       	nop
  94:	32 c0       	rjmp	.+100    	; 0xfa <__bad_interrupt>
  96:	00 00       	nop
  98:	30 c0       	rjmp	.+96     	; 0xfa <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2e c0       	rjmp	.+92     	; 0xfa <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2c c0       	rjmp	.+88     	; 0xfa <__bad_interrupt>
  a2:	00 00       	nop
  a4:	2a c0       	rjmp	.+84     	; 0xfa <__bad_interrupt>
  a6:	00 00       	nop
  a8:	28 c0       	rjmp	.+80     	; 0xfa <__bad_interrupt>
  aa:	00 00       	nop
  ac:	26 c0       	rjmp	.+76     	; 0xfa <__bad_interrupt>
  ae:	00 00       	nop
  b0:	24 c0       	rjmp	.+72     	; 0xfa <__bad_interrupt>
  b2:	00 00       	nop
  b4:	22 c0       	rjmp	.+68     	; 0xfa <__bad_interrupt>
  b6:	00 00       	nop
  b8:	20 c0       	rjmp	.+64     	; 0xfa <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1e c0       	rjmp	.+60     	; 0xfa <__bad_interrupt>
  be:	00 00       	nop
  c0:	1c c0       	rjmp	.+56     	; 0xfa <__bad_interrupt>
  c2:	00 00       	nop
  c4:	1a c0       	rjmp	.+52     	; 0xfa <__bad_interrupt>
  c6:	00 00       	nop
  c8:	18 c0       	rjmp	.+48     	; 0xfa <__bad_interrupt>
	...

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d1 e2       	ldi	r29, 0x21	; 33
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61
  d8:	00 e0       	ldi	r16, 0x00	; 0
  da:	0c bf       	out	0x3c, r16	; 60

000000dc <__do_copy_data>:
  dc:	12 e0       	ldi	r17, 0x02	; 2
  de:	a0 e0       	ldi	r26, 0x00	; 0
  e0:	b2 e0       	ldi	r27, 0x02	; 2
  e2:	ee e8       	ldi	r30, 0x8E	; 142
  e4:	f1 e0       	ldi	r31, 0x01	; 1
  e6:	00 e0       	ldi	r16, 0x00	; 0
  e8:	0b bf       	out	0x3b, r16	; 59
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x14>
  ec:	07 90       	elpm	r0, Z+
  ee:	0d 92       	st	X+, r0
  f0:	a2 31       	cpi	r26, 0x12	; 18
  f2:	b1 07       	cpc	r27, r17
  f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0x10>
  f6:	3e d0       	rcall	.+124    	; 0x174 <main>
  f8:	48 c0       	rjmp	.+144    	; 0x18a <_exit>

000000fa <__bad_interrupt>:
  fa:	82 cf       	rjmp	.-252    	; 0x0 <__vectors>

000000fc <lcdInitPin>:
#include <avr/io.h>
#include <util/delay.h>


void lcdInitPin(int registerNumber){
	PORTB = 0x02;
  fc:	92 e0       	ldi	r25, 0x02	; 2
  fe:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	e7 ea       	ldi	r30, 0xA7	; 167
 102:	f1 e6       	ldi	r31, 0x61	; 97
 104:	31 97       	sbiw	r30, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <lcdInitPin+0x8>
 108:	00 c0       	rjmp	.+0      	; 0x10a <lcdInitPin+0xe>
 10a:	00 00       	nop
	_delay_ms(100);
	PORTA = registerNumber;
 10c:	82 b9       	out	0x02, r24	; 2
	PORTB = 0x00;
 10e:	15 b8       	out	0x05, r1	; 5
 110:	87 ea       	ldi	r24, 0xA7	; 167
 112:	91 e6       	ldi	r25, 0x61	; 97
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <lcdInitPin+0x18>
 118:	00 c0       	rjmp	.+0      	; 0x11a <lcdInitPin+0x1e>
 11a:	00 00       	nop
 11c:	08 95       	ret

0000011e <lcdDisplayChar>:
//	_delay_ms (100)
//	PORTB = 0x01;
//}

void lcdDisplayChar(char *charcter){
	PORTB = 0x03;
 11e:	93 e0       	ldi	r25, 0x03	; 3
 120:	95 b9       	out	0x05, r25	; 5
	PORTA = charcter;
 122:	82 b9       	out	0x02, r24	; 2
 124:	83 ed       	ldi	r24, 0xD3	; 211
 126:	90 e3       	ldi	r25, 0x30	; 48
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcdDisplayChar+0xa>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcdDisplayChar+0x10>
 12e:	00 00       	nop
	_delay_ms(50);
	PORTB = 0x01;
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	85 b9       	out	0x05, r24	; 5
 134:	08 95       	ret

00000136 <lcdDisplayStr>:
	//PORTE = 0x00;
//	_delay_ms (100)
//}


void lcdDisplayStr(char *str){
 136:	0f 93       	push	r16
 138:	1f 93       	push	r17
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	8c 01       	movw	r16, r24
	lcdInitPin(0x30);
 140:	80 e3       	ldi	r24, 0x30	; 48
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	db df       	rcall	.-74     	; 0xfc <lcdInitPin>
	lcdInitPin(0x0E);
 146:	8e e0       	ldi	r24, 0x0E	; 14
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	d8 df       	rcall	.-80     	; 0xfc <lcdInitPin>
	lcdInitPin(0x80);
 14c:	80 e8       	ldi	r24, 0x80	; 128
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	d5 df       	rcall	.-86     	; 0xfc <lcdInitPin>
	
	for(int i=0; str[i] != '\0'; i++)
 152:	c0 e0       	ldi	r28, 0x00	; 0
 154:	d0 e0       	ldi	r29, 0x00	; 0
	{
		lcdDisplayChar(str[i]);
 156:	03 c0       	rjmp	.+6      	; 0x15e <lcdDisplayStr+0x28>
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	e1 df       	rcall	.-62     	; 0x11e <lcdDisplayChar>
void lcdDisplayStr(char *str){
	lcdInitPin(0x30);
	lcdInitPin(0x0E);
	lcdInitPin(0x80);
	
	for(int i=0; str[i] != '\0'; i++)
 15c:	21 96       	adiw	r28, 0x01	; 1
 15e:	f8 01       	movw	r30, r16
 160:	ec 0f       	add	r30, r28
 162:	fd 1f       	adc	r31, r29
 164:	80 81       	ld	r24, Z
 166:	81 11       	cpse	r24, r1
 168:	f7 cf       	rjmp	.-18     	; 0x158 <lcdDisplayStr+0x22>
	{
		lcdDisplayChar(str[i]);
	}
}
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	1f 91       	pop	r17
 170:	0f 91       	pop	r16
 172:	08 95       	ret

00000174 <main>:
	PORTB = 0x01;
}

int main(void)
{
	DDRA = 0xFF;
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	81 b9       	out	0x01, r24	; 1
	DDRB = 0xFF;
 178:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xFF;
 17a:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0xFF;
 17c:	8d b9       	out	0x0d, r24	; 13
	
	lcdDisplayStr("DOSGALI ISKANDER");
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	92 e0       	ldi	r25, 0x02	; 2
 182:	d9 df       	rcall	.-78     	; 0x136 <lcdDisplayStr>
}
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	08 95       	ret

0000018a <_exit>:
 18a:	f8 94       	cli

0000018c <__stop_program>:
 18c:	ff cf       	rjmp	.-2      	; 0x18c <__stop_program>
